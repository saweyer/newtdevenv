// ProtErr1.pkg// Copyright 1995-97 S. Weyer. All Rights Reserved Worldwide// Corresponds to MessagePad Platform 1.5d2constant kAutoCnst 		:= "ProtErr1";constant kVersionNum 	:= "3.4";constant kBetaVersion	:= "b";constant kDemoVersion	:= NIL;if not IsGlobalConstant('kBuild20)then DefineGlobalConstant('kBuild20,		platformVersion.platformFile = '|Newton 2.0| or		platformVersion.platformFile = '|MessagePad2.1|);	// ???if not IsGlobalConstant('kBuild1x)then DefineGlobalConstant('kBuild1x, not kBuild20);DefineGlobalConstant('kVersionString,	kVersionNum & kBetaVersion &	(if kDebugOn then $D) &	(if kProfileOn then $P) &	(if not kIgnoreNativeKeyword then $N) &	(if kBuild20 then "-2") &	(if kDemoVersion then $X));DefineGlobalConstant ('kVersion, kAutoCnst && kVersionString);Print(kVersion && DateNTime(time()));DeclareGlobalFn('DeclareGlobalFn,2);if kBuild1xthen begin	DeclareGlobalFn('GetGlobalVar,1);	DeclareGlobalFn('DefGlobalVar,2);	end;constant kNewtSymbol 	:= '|NewtDevEnv:TKnollSys|;constant kConstant 		:= 'constants; // for protoDictconstant kProto	   		:= 'protos;    // for errorCodesconstant kProtoDict		:= 'protErr1;constant kErrorCodes	:= 'errorCodes;constant kEvalContextSym := 'getEvalContext;DefineGlobalConstant('kEvalContextFunc, func()begin	local evalContext, evalTemp, fr;	evalContext := evalTemp := {_parent: GetRoot()};	// e.g., protoDict, ViewCnst, PlatFunc    foreach fr in GetGlobals().(kNewtSymbol).(kConstant)	do evalTemp := evalTemp._parent :=		{_parent: evalTemp._parent, _proto: fr};	evalContext;end);if kBuild1x and not kDemoVersionthen kProtoDictFrame.protoInfoButton := GetLayout("myProtoInfoButton"); // !!!cif not kDemoVersionthen kProtoDictFrame.protoAboutText := GetLayout("protoAboutText"); 	// !!!cconstant kInstalled		:= 'installed;DefineGlobalConstant('kPkgSymbol,	Intern(kPackageName)); // kAppSymbol='autoPrint(kPkgSymbol);// copied from AutoInstallRemoveDefineGlobalConstant('kRegExpMin, 5*1440);	// number of mins to expire inDefineGlobalConstant('kRegTag, "NG:SK"); 	// this is the app-specific ID for this "lock" DefineGlobalConstant('kRegIspec, {	type: 'index,	IndexPath: 'tag,	startKey: kRegTag,	endTest: func(e) NOT StrEqual(e.tag,kRegTag),});DefineGlobalConstant('kRegExpired, func()begin	//	true - demo has expired	//	nil - full demo or non-demo build.	local prefSoup := GetStores()[0]:GetSoup(ROM_systemSoupName);	local cursor :=		if kBuild20		then prefSoup:Query(kRegIspec)		else Query(prefSoup, kRegIspec);	local prefsEntry := cursor:entry();	prefsEntry and		StrEqual(prefsEntry.tag, kRegTag) and		EntryModTime(prefsEntry) + kRegExpMin < Time()end);if kDemoVersion and kBuild20then SetPartFrameSlot('DoNotInstall, kRegExpired);InstallScript := func(partFrame,removeFrame)if not (kDemoVersion and call kRegExpired with ())then begin	local gData :=		if kBuild1x and Functions.GetGlobals exists		then GetGlobals().(kNewtSymbol)		else GetGlobalVar(kNewtSymbol);	if not gData	then begin		gData := EnsureInternal(				{constants: {}, libraries: {}, protos: {},				tools: {}, views: {}, installed: {}, });		if kBuild1x and Functions.GetGlobals exists		then GetGlobals().(EnsureInternal(kNewtSymbol)) := gData		else DefGlobalVar(EnsureInternal(kNewtSymbol), gData);		end;	gData.(kInstalled).(EnsureInternal(kPkgSymbol))	:= kVersion;	local part := partFrame.partData;	gData.(kConstant).(EnsureInternal(kProtoDict))	:= part.(kProtoDict);	gData.(kProto).(EnsureInternal(kErrorCodes)) 	:= part.(kErrorCodes);	gData.(EnsureInternal(kEvalContextSym)) 		:= part.(kEvalContextSym);end;RemoveScript := func(removeFrame)begin	local gData :=		if kBuild1x and Functions.GetGlobals exists		then GetGlobals().(kNewtSymbol)		else GetGlobalVar(kNewtSymbol);	if gData	then begin		RemoveSlot(gData.(kInstalled),	kPkgSymbol);		RemoveSlot(gData.(kConstant), 	kProtoDict);		RemoveSlot(gData.(kProto), 		kErrorCodes);		RemoveSlot(gData, 				kEvalContextSym);		end;end;partData := {};partData.(kProtoDict) 		:= kProtoDictFrame;partData.(kErrorCodes) 		:= kErrorCodesArray;partData.(kEvalContextSym)	:= kEvalContextFunc;