// MiscMetaif not IsGlobalConstant('kBuild20)then DefineGlobalConstant('kBuild20,	// '|Newton 2.0| or '|Newton 2.1|		BeginsWith(SprintObject(platformVersion.platformFile), "Newton"));if not IsGlobalConstant('kBuild1x)then DefineGlobalConstant('kBuild1x, not kBuild20);DefineGlobalConstant('kRemoveString, func(a, strs)begin	local i, item, str;	foreach str in strs	do foreach i,item in Clone(a)		do  if  (isinstance(item, 'string) and StrEqual(item, str)) or				(isFrame(item) and StrEqual(item.item, str))			then break ArrayRemoveCount(a,i,1);end);// share in kFuncDefs, kMethDefsconstant kArg0 		:= "";constant kArgAppSym	:= "appSym";constant kArgAppFn	:= "appSym,cbFn";constant kArgArray	:= "array";constant kArgArrayITK:= "array,item,test,key";constant kArgArrayISTK	:= "array,item,start,test,key";constant kArgArrayTKU	:= "array,item,test,key,uniqueOnly";constant kArgArray2TKU	:= "array1,array2,test,key,uniqueOnly";constant kArgArrayTK:= "array,test,key";constant kArgArray2	:= "array1,array2";constant kArgArrayv	:= "array,val";constant kArgBnds	:= "bounds";constant kArgChar	:= "char";constant kArgData	:= "data,offset";constant kArgDate	:= "date";constant kArgEntry	:= "entry";constant kArgEntryC := "entry,changeSym";constant kArgFont	:= "font";constant kArgFrSym	:= "frame,sym";constant kArgFunc	:= "fn";constant kArgNewFunc:= "->fn?";constant kArgIndex	:= "index";constant kArgInt	:= "int";constant kArgInt2	:= "i1,i2";constant kArgItem	:= "item";constant kArgLTRB	:= "left,top,right,bot";constant kArgMock	:= "mockEntry";constant kArgMunge	:= "dst,dstStart,dstCount,src,srcStart,srcCount";constant kArgName	:= "name";constant kArgNum	:= "num";constant kArgNum2	:= "n1,n2";constant kArgRGB	:= "packedRGB";constant kArgObj	:= "obj";constant kArgOffset	:= "offset";constant kArgPkg	:= "pkgRef";constant kArgShape	:= "shape";constant kArgSound	:= "sound";//constant kArgSoup	:= "soup";constant kArgSoupN	:= "soupName";constant kArgStore	:= "store";constant kArgStr	:= "str";constant kArgStr2	:= "str1,str2";constant kArgStrs	:= "str,substr";constant kArgStroke	:= "strokeUnit";constant kArgSym	:= "sym";constant kArgTarget	:= "target";constant kArgTmp	:= "template";constant kArgTime	:= "time";constant kArgUnit	:= "unit";constant kArgVBO	:= "vbo";constant kArgVal	:= "val";constant kArgView	:= "view";constant kArgVol	:= "volume";constant kArgWord	:= "word";constant kArgX 		:= "x";constant kArgXY		:= "x,y";constant kArgdXdY	:= "dx,dy";/*myApp:AlarmsEnabled()transport:AppClosed(senderSym)myAppBase.AppFindTargets()transport:AppInFront(inFront, senderSym)transport:AppOpened(senderSym)//BusyBoxControl:		"controlNum",buttonClickScript:  inhbuttonPressedScriptcallbackSpec:CompletionScript(endpoint, options, result)ConnectionDetect:	kArg0,				//transportformat:CountPages(item, target)myNewtSoup:CreateBlankEntry()myAppBase.CustomFind()picker:DateChanged(array)myAppBase.DateFind(findTime, compareHow, results, scope, statusView)myNewtApplication:DateFind(date, findType, results, scope, findContext)myAppBase.DateFindTargeted(findTime, compareHow, results, scope, statusView, target)compatibleFinder:Delete()view:Delete(methodName, methodParameters)DeletionScript()charEditView:DisplayExternal(doIt)myThumbnail:DoneScrolling()DoNotInstallScript()myEntryView:DoRetarget()view:EditAddWordScript(form, bounds)myEntryView:EndFlush()handler:EntryAccess(mockEntry)endpoint:EventHandler(event)endpoint:ExceptionHandler(error)compatibleFinder:FileAndMove(labelsChanged,newLabel,storeChanged, newStore)FileEntry(entry, newLabels)FileSoup(newLabels, newStore)targetView:FileThis(target, labelsChanged, newLabels, storesChanged, newStore)myNewtSoup:FillNewSoup()myNewtApplication:FilterChanged()myAppBase.Find(what,results,scope,statusView)myNewtApplication:Find(text, results, scope, findContext)ownerView.FindSoupExcerpt(entry,finderFrame)myAppBase.FindTargeted(what, results, scope, statusView, target)charEditView:FixedWord()charEditView:FixedWordLength()myNewtApplication:FolderChanged(soupName, oldFolder, newFolder)routingSlip:FormatChanged(format)format:FormatInitScript(item, reserved)transport:GetFromText(item)transport:GetItemInfo(item, length, fontInfo)dataDef:GetItemRoutingFrame(item)transport:GetItemTime(item)dataDef:GetRoutingInfo(object)dataDef:GetRoutingTitle(objects, width, font)myNewtApplication:GetTarget()myOverLayout:GetTargetInfo(targetType)myNewtApplication:GetTargetView()toDoFrame:GetTaskShapes(originalShapes, task, yOffset, width, font)transport:GetTitleInfoShape(item, bounds)toDoFrame:GetToDoShapes(date, yOffset, width, font)transport:GetToText(item)transport:GetTransportScripts(target)transport:HandleError(error)InstallScriptpicker:IconSetup()transport:InstallScript(symbol)transport:IgnoreError(error)transport:IOBoxExtensions(item, target, viewDefs, reserved)app:ItemCompletionScript(item)transport:ItemDeleted(item)transport:ItemDuplicated(item)transport:ItemPutAway(item)picker:LabelActionScript(index)format:MakeBodyAlias(targetInfoFrame)transport:MakeLogEntry(logItem, item)myDataDef:MakeNewEntry()myNewtSoup:MakeSoup(appSymbol)myViewDef:MinimalBounds(entry)transport:MissingTarget(reserved)monthView:MonthChangedScript()MoveEntry:				entry,newStorepopup:New(time, increment, bbox, callbackContext)popup:New(initialDates, bbox, callbackContext)popup:New(dateNTime, increment, bbox, callbackContext)...targetView:NewFilingFilter(newFilterPath)transport:NewFromItem(item)transport:NewItem(context)myMeetingType:NewMeeting(date, parentBox)myNewtApplication:NewtDeleteScript(what, view)myNewtApplication:NewtDuplicateScript(what, view)callbackContext:NewTime(time)callbackContext:NewYear(year)myMeetingType:OpenMeeting(meeting, date, parentBox)outline:OutlineClickScript(index, unused)routingSlip:OwnerInfoChanged()//PartialScript:		kArg0,	//nil endpointPartialScript:		"endpoint,data",	//inputSpecmyApp:PeriodicAlarm(alarm)callbackContext:PickActionScript(time)callbackContext:PickCancelledScript()picker:PickerSetup()myTabs:PickLetterScript(letter)picker:PickWorld(info)taskFrame:PostParse();transport:PowerOffCheck(why)picker:PrepareForClick()dataDef:PrepareForRouting(nameRef, fieldPath, format)myThumbnail:PrepareToScroll()routingSlip:PrepareToSend(when)format:PrintNextPageScript()streamSpec:ProgressScript(bytes, totalBytes)app:PutAwayScript(item)transport:ReceiveRequest(request)view:RecogSettingsChanged(viewFlags)format:ResolveBody(item)charEditView:SaveUndoState(appState)ScalingInfoChanged:	"slot",		//imageViewoverview:SelectItem(hitIndex)table:SelectThisCell(cell)transport:SendRequest(request)scroller:SetArrow(direction, state)app:SetDefaultFormat(transportSym, target, formatSym)myEntryLockedIcon:SetIcon()targetViewDef:SetupForm(entry, entryView)format:SetupItem(item, targetInfoFrame)popupButton:SetUpStatArray()charEditTemplate:SetupString(str)myEmporiumPopup:SetupText()myNewtApplication:ShowLayout(layout)picker:SoupEnters(soupName, changeData), leavespopupButton:StatScript(stationeryItem)myDataDef:StringExtract(entry, nLines)table:TabSetup(view, column, row)TargetChanged:		kArg0,		//imageViewformat:TargetSize(targetInfoFrame)picker:TextChanged()myDataDef:TextScript(item, target)picker:TextSetup()clock:TimeChanged()myFolderTabView:TitleClickScriptslider:TrackSlider()transport:TranslateError(error)routingSlip:TransportChanged(newSymbol)checkBox:ValueChanged()app:VerifyRoutingInfo(targetInfo, item)view:ViewAddChildScript(child)view:ViewChangedScript(slot, view)textView:ViewCorrectionPopupScript(pickForm)viewDropChildScript:	"childView",	//removed booleanviewdestView:ViewDropDoneScript()view:ViewFinalChangeScript(valueBefore, valueAfter)destView:ViewFindTargetScript(dragInfo)scroller:ViewScrollDoneScript()KillStdButtonBarROM_GetSerialNumber	// Misc Toolbox Calls.pdf// newtworksdataDef:FindFn(entry, what, offset)dataDef:InfoBoxExtract(target, maxSize, viewDefView)viewDef:DoHelp(entry)viewDef:FindChange(action, data)viewDef:GetScrollableRect()viewDef:GetScrollValues()viewDef:GetTotalHeight()viewDef:GetTotalWidth()viewDef:PrefsChanged(prefsFrame)viewDef:SaveData(entry)viewDef:Scroll(scrollValues)viewDef:ToolsChanged(actionSym, toolSym)viewDef:UpdateStatusBar()protoDrawTool:MakeObject(left, top, right, bottom, style)protoDrawTool:SetAttribute(shape, attribute, newValue)protoDrawTool:MakeDragObject(left, top, right, bottom, style)protoDrawTool:AdjustBounds(shape, style, left, top, right, bottom, constrain)protoDrawTool:ScaleShape(shape, oldBounds, newBounds) protoDrawTool:CanvasClickScript(unit)protoDrawTool:ToolClickScript(unit)protoDrawTool:ToolBegin()protoDrawTool:ToolEnd()viewUpdateScrollersScript:	"updateMaxVal,scrolled",	//TXViewrecorderview.statusText:SetState(oldState, newState, hasSound)GetBackupSoupNames:		kArg0,				// multiuser 2.1passwordSlip:MatchedPassword()partFrame:ImportDisabled(unitName, majorVersion, minorVersion)*//*get scripts.proto**/