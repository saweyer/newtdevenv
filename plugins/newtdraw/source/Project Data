// Newt Controls & Newt Drawing (autopart) 3.4// Copyright 1995-97. S. Weyer. All Rights Reserved Worldwideconstant kAutoCnst 		:= "NewtDraw";constant kVersionNum 	:= "3.4";constant kBetaVersion	:= "b";if not IsGlobalConstant('kBuild20)then DefineGlobalConstant('kBuild20,	// '|Newton 2.0| or '|Newton 2.1|		BeginsWith(SprintObject(platformVersion.platformFile), "Newton"));if not IsGlobalConstant('kBuild1x)then DefineGlobalConstant('kBuild1x, not kBuild20);DefineGlobalConstant('kVersionString,	kVersionNum & kBetaVersion &	(if kDebugOn then "D") &	(if kProfileOn then "P") &	(if not kIgnoreNativeKeyword then "N") &	(if kBuild20 then "-2"));DefineGlobalConstant ('kVersion, kAutoCnst && kVersionString);Print(kVersion && DateNTime(time()));DeclareGlobalFn('DeclareGlobalFn,2);if kBuild1xthen begin	DeclareGlobalFn('GetGlobalVar,1);	DeclareGlobalFn('DefGlobalVar,2);	end;// GLOBAL functions/*DefineGlobalConstant('MyRoundTo,func(val,grid) // used in drawView:viewGestureScriptif grid then RIntToL(val/grid)*grid else val);*/DefineGlobalConstant('PerformVals,func(f,msg,aparams) // iterate over list of paramsbegin // e.g., :PerformVals(self,'removeNewt,clone(all_Newts))   local val;   foreach val in aparams   do Perform(f,msg,if isArray(val) then val else [val]);end);constant eString := ""; // an empty string (readonly)constant eArray := '[]; // an empty array  (readonly)constant slotErr    := "existing slot";constant subLeft    :=  4;  // left offset of Edit,Print,Aboutconstant subTop     := 18;  // top offset of Edit,Print,Aboutconstant subRight   := -4;  // right offset of Edit,Print,Aboutconstant subBottom  := -4;  // bottom offset of Edit,Printconstant kDragRadius := 5;constant delayMsecs := 10;constant kNewtControlTitle := "Newt Controls";constant kNewtDrawTitle := "Newt Drawing";constant kTimes     := "Times";constant kDist      := "Dist";constant kDeg       := "Deg";constant radiansPerDegree := 0.01745329252 ;  // 3.14159265359/180.0constant noteLeft :=    10;constant newtTop :=     34;            // noteTop+evalHeight+noteTopconstant noteWidth :=  226;constant newtHeight := 230;            // height of Newt drawing areaconstant newtBeep :=  ROM_hilitesound;constant poofSound := ROM_poof;constant newtRadius :=   10;constant newtArc2 :=     90;    // 2*45.  45 is half of arcconstant newt180_Arc := 135;    // 180-45constant distGrid :=     10;    // for line gestureconstant degGrid :=      45;constant kNewtSymbol 	:= '|NewtDevEnv:TKnollSys|;constant kPlugType		:= 'tools;constant kControlSym	:= 'newtControls;constant kDrawingSym	:= 'newtDrawing;constant kInstalled		:= 'installed;DefineGlobalConstant('kPkgSymbol,	Intern(kPackageName)); // kAppSymbol='autoPrint(kPkgSymbol);DefineGlobalConstant('kEmptyGlobal, {	constants: {}, libraries: {}, protos: {},	tools: {}, views: {}, installed: {},});InstallScript := func(partFrame,removeFrame)begin	local gData;	if kBuild1x and Functions.GetGlobals exists	then begin		gData := GetGlobals().(kNewtSymbol);		if not gData		then GetGlobals().(EnsureInternal(kNewtSymbol)) := gData := EnsureInternal(kEmptyGlobal);		end	else begin		gData := GetGlobalVar(kNewtSymbol);		if not gData		then DefGlobalVar(EnsureInternal(kNewtSymbol), gData := EnsureInternal(kEmptyGlobal));		end;//Print(kVersion);	gData.(kInstalled).(EnsureInternal(kPkgSymbol))	:= kVersion;	gData.(kPlugType).(EnsureInternal(kControlSym)) := partFrame.partData.(kControlSym);	gData.(kPlugType).(EnsureInternal(kDrawingSym)) := partFrame.partData.(kDrawingSym);end;RemoveScript := func(removeFrame)begin	local gData :=		if kBuild1x and Functions.GetGlobals exists		then GetGlobals().(kNewtSymbol)		else GetGlobalVar(kNewtSymbol);	if gData	then begin		RemoveSlot(gData.(kInstalled),  kPkgSymbol);		RemoveSlot(gData.(kPlugType), 	kControlSym);		RemoveSlot(gData.(kPlugType), 	kDrawingSym);		end;end;partData := {};