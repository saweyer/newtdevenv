constant kFakeStr := "\u00A0";func(INT x1, INT y1) // !!!mbegin	// assumes caret already set	local INT slen := StrLen(text), first := 0, last := 0;	// find "word" clicked on	if kBuild20	then begin		local se := :PointToWord(x1, y1);		if se		then begin			first := se.startChar;			last := se.endChar;			end;		end	else begin		PostKeyString(self,kFakeStr);		ClearUndoStacks();		first := last := StrPos(text,kFakeStr,0);//Print([first,last]);		if not first		then return;		SetValue(self, 'text, StrMunger(text,first,1, nil,0,nil));		SetKeyView(self, first);		//first := last := GetCaretBox().offset; // 1.x doesn't work...		while (first > 0) and isAlphaNumeric(text[first-1])		do first := first-1;		while (last < slen) and isAlphaNumeric(text[last])		do last := last+1;//Print([first,last]);		end;//Print(se);	if first < last and last < slen	then begin		local str := SubStr(text, first, last - first), ch := text[last], info, pos, lineEnd;		local sym := Intern(str);		local lineEnd := if kBuild20 then CharPos(text, unicodeCR, last) else StrPos(text, cr, last);//Print(str);		if ch = $:		then begin // slot?			if info := HelpStr.slotHelp.(sym)			then begin				pos := if kBuild20 then CharPos(text, $,, last) else StrPos(text, ",", last); 				pos :=	// end of val/line					if pos					then if lineEnd						then min(pos,lineEnd)						else pos					else lineEnd;				self.replaceStuff := [str, last+1, lineEnd, $ , ",\n"];				end;			end		else if ch = $(		then begin	// method or function			info := if first > 0 and text[first-1] = $:				then HelpStr.methHelp.(sym)				else HelpStr.funcHelp.(sym);			if info			then begin				pos := if kBuild20 then CharPos(text, $), last) else StrPos(text, ")", last);					pos :=	// end of expr/line					if pos					then if lineEnd						then min(pos,lineEnd)						else pos					else lineEnd;				self.replaceStuff := [str, last+1, pos, nil, if pos=lineEnd then ");\n" else $)];				end;			end		else if ch = $,		then begin	// arg (like protoApp?)			if info := HelpStr.protHelp.(sym)			then begin				info := ArrayMunger(Clone(info), Length(info), 0, HelpStr.viewHelp, 0, nil);				self.replaceStuff := [str, last+1, lineEnd, unicodeCR, ": ,\n"];				end			end;		if info		then begin//Print(info); Print(replaceStuff);			self.replaceOptions := if isArray(info) then info else [info];			local gb := :GlobalBox();			:newtPopup(replaceOptions, x1 - gb.left, y1 - gb.top);/*			if kBuild20			then begin				local pp := :PopupMenu(replaceOptions, {left: x1 - gb.left, top: y1 - gb.top});				pp.pickMaxWidth := GetAppParams().appAreaWidth-10;				pp:?SyncView();				//SetKeyView(self, :PointToCharOffset(x1,y1));				end			else DoPopup(replaceOptions, x1 - gb.left, y1 - gb.top, self);*/			end;		end;end