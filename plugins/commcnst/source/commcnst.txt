// commcnst.txt// constant definitions for CommCnst.pkg// Copyright 1995-96 S. Weyer. All Rights Reserved Worldwide// 3 Sep 96// based on NTK Definitions (Copyright Apple Computer, Inc. 1993-1995; version 8??)// protoEndPoint (and other comm constants);// two versions:// CommEndP.pkg (protoEndPoint only)	pkg size =~18K?// CommCnst.pkg (all)					pkg size =~31K?partData :=if kEndPointOnlythen {protoEndPoint: protoEndPoint}else{protoEndPoint: 			protoEndPoint,kModemECProtocolNone:	kModemECProtocolNone,	// 0x00000001kModemECProtocolMNP:	kModemECProtocolMNP,	// 0x00000002kModemECProtocolLAPM:	kModemECProtocolLAPM,	// 0x00000004kModemECProtocolExternal:						// 0x00000008						kModemECProtocolExternal,kSpeakerVolumeLow:		kSpeakerVolumeLow, 		// "1"kSpeakerVolumeMedium:	kSpeakerVolumeMedium,	// "2"kSpeakerVolumeHigh:		kSpeakerVolumeHigh,		// "3"kModemCntSpeed300:	 	kModemCntSpeed300,		// 0x00000001kModemCntSpeed1200:	 	kModemCntSpeed1200,		// 0x00000002kModemCntSpeed2400:	 	kModemCntSpeed2400,		// 0x00000004kModemCntSpeed4800:	 	kModemCntSpeed4800,		// 0x00000008kModemCntSpeed7200:	 	kModemCntSpeed7200,		// 0x00000010kModemCntSpeed9600:	 	kModemCntSpeed9600,		// 0x00000020kModemCntSpeed12000: 	kModemCntSpeed12000,	// 0x00000040kModemCntSpeed14400: 	kModemCntSpeed14400,	// 0x00000080kModemCntSpeed16800:	kModemCntSpeed16800,	// 0x00000100kModemCntSpeed19200: 	kModemCntSpeed19200,	// 0x00000200kModemCntSpeed21600: 	kModemCntSpeed21600,	// 0x00000400kModemCntSpeed24000: 	kModemCntSpeed24000,	// 0x00000800kModemCntSpeed26800: 	kModemCntSpeed26800,	// 0x00001000kModemCntSpeed29000: 	kModemCntSpeed29000,	// 0x00002000kModemCntSpeed31400: 	kModemCntSpeed31400,	// 0x00004000kCMOMNPAllocate:		kCMOMNPAllocate,		// "mnpa"kCMOMNPCompression: 	kCMOMNPCompression,		// "mnpc"kCMOMNPDataRate:		kCMOMNPDataRate,		// "eter"kCMOMNPStatistics:		kCMOMNPStatistics,		// "mnps"kMNPCompressionNone: 	kMNPCompressionNone,	// 0x00000001kMNPCompressionMNP5: 	kMNPCompressionMNP5,	// 0x00000002kMNPCompressionV42bis: 	kMNPCompressionV42bis, 	// 0x00000008kCMS_CapabilityType_ServiceId:					// "serv"						kCMS_CapabilityType_ServiceId,kCMS_CapabilityType_Version:				 	// "vern"						kCMS_CapabilityType_Version,kCMS_UnknownVersion: 	kCMS_UnknownVersion,	// "zzzz"kCMSAppleTalkID:		kCMSAppleTalkID,		// "atlk"kCMSFaxID:				kCMSFaxID,				// "faxs"kCMSModemID:			kCMSModemID,			// "mods"kCMSSlowIR:				kCMSSlowIR,				// "slir"kCMSMNPID: 				kCMSMNPID,				// "mnps"kCMSBasicSerial: 		kCMSBasicSerial,		// "ser "kCMSAsyncSerial: 		kCMSAsyncSerial,		// "aser"kCMSFramedAsyncSerial: 	kCMSFramedAsyncSerial, 	// "fser"kCMSLocalTalkID: 		kCMSLocalTalkID, 		// "ltlk"kCMSKeyboard: 			kCMSKeyboard, 			// "kybd"kCMSBlackbird: 			kCMSBlackbird, 			// "blkb"kCMSVAppleTalk: 		kCMSVAppleTalk,			// "1"kCMSVFaxID: 			kCMSVFaxID,				// "1"kCMSVModemID: 			kCMSVModemID,			// "1"kCMSVSlowIR: 			kCMSVSlowIR,			// "1"kCMSVMNPID: 			kCMSVMNPID,				// "1"kCMSVBasicSerial: 		kCMSVBasicSerial,		// "1"kCMSVAsyncSerial: 		kCMSVAsyncSerial,		// "1"kCMSVFramedAsyncSerial: kCMSVFramedAsyncSerial, // "1"kCMSVLocalTalkID: 		kCMSVLocalTalkID, 		// "1"kCMSVKeyboard: 			kCMSVKeyboard, 			// "1"kCMSVBlackbird: 		kCMSVBlackbird, 		// "1"kSubArrayOption: 		kSubArrayOption, 		// "suba"kOptionType: 			kOptionType, 			// 0x0C000000kConfigType: 			kConfigType, 			// 0x10000000kTypeMask: 				kTypeMask, 				// 0x3C000000kOpCodeMask: 			kOpCodeMask, 			// 0x0000FF00kOpCodeResultMask: 		kOpCodeResultMask, 		// 0x000000FFopInvalid: 				opInvalid, 				// 0x0000opSetNegotiate: 		opSetNegotiate, 		// 0x0100opSetRequired: 			opSetRequired, 			// 0x0200opGetDefault: 			opGetDefault, 			// 0x0300opGetCurrent: 			opGetCurrent, 			// 0x0400opProcess: 				opProcess, 				// 0x0500unicodeNUL: 			$\00, //unicodeNUL, (not defined in 1.1) 			// $\0000unicodeSOH: 			unicodeSOH, 			// $\01unicodeSTX: 			unicodeSTX, 			// $\02unicodeETX: 			unicodeETX, 			// $\03unicodeEOT: 			unicodeEOT, 			// $\04unicodeENQ: 			unicodeENQ, 			// $\05unicodeACK: 			unicodeACK, 			// $\06unicodeBEL: 			unicodeBEL, 			// $\07unicodeBS: 				unicodeBS, 				// $\08unicodeHT: 				unicodeHT, 				// $\09unicodeLF: 				unicodeLF, 				// $\0AunicodeVT: 				unicodeVT, 				// $\0BunicodeFF: 				unicodeFF, 				// $\0CunicodeCR: 				unicodeCR, 				// $\0DunicodeSO: 				unicodeSO, 				// $\0EunicodeSI: 				unicodeSI, 				// $\0FunicodeDLE: 			unicodeDLE,				// $\10unicodeDC1: 			unicodeDC1, 			// $\11unicodeDC2: 			unicodeDC2, 			// $\12unicodeDC3: 			unicodeDC3, 			// $\13unicodeDC4: 			unicodeDC4, 			// $\14unicodeNAK: 			unicodeNAK, 			// $\15unicodeSYN: 			unicodeSYN, 			// $\16unicodeETB: 			unicodeETB, 			// $\17unicodeCAN: 			unicodeCAN, 			// $\18unicodeEM: 				unicodeEM, 				// $\19unicodeSUB: 			unicodeSUB, 			// $\1AunicodeESC: 			unicodeESC, 			// $\1BunicodeFS: 				unicodeFS, 				// $\1CunicodeGS: 				unicodeGS, 				// $\1DunicodeRS: 				unicodeRS, 				// $\1EunicodeUS: 				unicodeUS, 				// $\1FkDefaultXOnChar: 		kDefaultXOnChar, 		// 0x11kDefaultXOffChar: 		kDefaultXOffChar, 		// 0x13kDefaultFramingChar: 	kDefaultFramingChar, 	// 0x10kDefaultEOMChar: 		kDefaultEOMChar, 		// 0x03kDefaultSOMChar: 		kDefaultSOMChar, 		// 0x16kDefaultSOHChar: 		kDefaultSOHChar, 		// 0x02kNoChannel: 			kNoChannel, 			// 0kSCCSideA: 				kSCCSideA, 				// 1kSCCSideB: 				kSCCSideB, 				// 2kSCCServiceNotSpecified:						kSCCServiceNotSpecified,// 0kSCCServiceStandard:	kSCCServiceStandard, 	// 1kSCCServicePtToPtIR: 	kSCCServicePtToPtIR, 	// 2kSCCServiceModem: 		kSCCServiceModem, 		// 3kSCCServicePrinter: 	kSCCServicePrinter, 	// 4k1StopBits: 			k1StopBits, 			// 0k1pt5StopBits: 			k1pt5StopBits, 			// 1k2StopBits: 			k2StopBits, 			// 2kNoParity: 				kNoParity, 				// 0kOddParity: 			kOddParity, 			// 1kEvenParity: 			kEvenParity, 			// 2k5DataBits: 			k5DataBits, 			// 5k6DataBits: 			k6DataBits, 			// 6k7DataBits: 			k7DataBits, 			// 7k8DataBits: 			k8DataBits, 			// 8kExternalClock: 		kExternalClock, 		// 1k300bps: 				k300bps, 				//    300k600bps: 				k600bps, 				//    600k1200bps: 				k1200bps, 				//   1200k2400bps: 				k2400bps, 				//   2400k4800bps: 				k4800bps, 				//   4800k7200bps: 				k7200bps, 				//   7200k9600bps: 				k9600bps, 				//   9600k12000bps: 				k12000bps, 				//  12000k14400bps: 				k14400bps, 				//  14400k19200bps: 				k19200bps, 				//  19200k38400bps: 				k38400bps, 				//  38400k57600bps: 				k57600bps, 				//  57600k115200bps: 			k115200bps, 			// 115200k230400bps: 			k230400bps, 			// 230400kSerialEventBreakStartedMask:	kSerialEventBreakStartedMask, 	// 0x00000001kSerialEventBreakEndedMask:		kSerialEventBreakEndedMask,		// 0x00000002kSerialEventDCDNegatedMask:		kSerialEventDCDNegatedMask,		// 0x00000004kSerialEventDCDAssertedMask:	kSerialEventDCDAssertedMask,	// 0x00000008kSerialEventHSKiNegatedMask:	kSerialEventHSKiNegatedMask,	// 0x00000010kSerialEventHSKiAssertedMask:	kSerialEventHSKiAssertedMask,	// 0x00000020kSerialEventExtClkDetectEnableMask:	kSerialEventExtClkDetectEnableMask,// 0x00000040kSerialEventGPiWakeupEnableMask:	kSerialEventGPiWakeupEnableMask,	// 0x00000080irUsingNegotiateIR: 	irUsingNegotiateIR, 	// 0x00irUsingSharpIR: 		irUsingSharpIR, 		// 0x01irUsingNewtIR: 			irUsingNewtIR, 			// 0x02irJ1ProtocolType: 		irJ1ProtocolType, 		// bor(irUsingSharpIR,irUsingNewtIR)irUsing9600: 			irUsing9600, 			// 0x01irUsing19200: 			irUsing19200, 			// 0x02irUsing38400: 			irUsing38400, 			// 0x04irJ1ProtocolOptions: 	irJ1ProtocolOptions, 	// bor(irUsing9600,irUsing19200)kCMOSerialHardware: 	kCMOSerialHardware, 	// "scc "kCMOSerialBuffers: 		kCMOSerialBuffers, 		// "sbuf"kCMOSerialIOParms: 		kCMOSerialIOParms, 		// "siop"kCMOSerialBitRate: 		kCMOSerialBitRate, 		// "sbps"kCMOSerialBreak: 		kCMOSerialBreak, 		// "sbrk"kCMOSerialBytesAvailable:						// "sbav"						kCMOSerialBytesAvailable,kCMOSerialDiscard: 		kCMOSerialDiscard, 		// "sdsc"kCMOBreakFraming: 		kCMOBreakFraming, 		// "sbkf"kCMOSerialDTRControl: 	kCMOSerialDTRControl, 	// "sdtr"kCMOSerialMiscConfig: 	kCMOSerialMiscConfig, 	// "smsc"kCMOSerialEventEnables: kCMOSerialEventEnables, // "sevt"kCMOSerialIOStats: 		kCMOSerialIOStats, 		// "sios"kCMOOutputFlowControlParms:						// "oflc"						kCMOOutputFlowControlParms,kCMOInputFlowControlParms:						// "oflc"						kCMOInputFlowControlParms,												// "iflc"kCMOFramingParms: 		kCMOFramingParms, 		// "fram"kCMOFramedAsyncStats: 	kCMOFramedAsyncStats, 	// "frst"kCMOLocalTalkStats: 	kCMOLocalTalkStats, 	// "ltst"kCMOLocalTalkNodeID: 	kCMOLocalTalkNodeID, 	// "ltid"kCMOLocalTalkMiscConfig:						kCMOLocalTalkMiscConfig,// "ltms"kCMOSlowIRProtocolType: kCMOSlowIRProtocolType, // "irpt"kCMOSlowIRStats: 		kCMOSlowIRStats, 		// "irst"kCMOSlowIRSniff: 		kCMOSlowIRSniff, 		// "irsn"kCMOSlowIRBitBang: 		kCMOSlowIRBitBang, 		// "irtv"kCMOEndpointName: 		kCMOEndpointName, 		// "endp"kCMOAppleTalkADSP: 		kCMOAppleTalkADSP, 		// [97,100,115,112]kADSPEndpoint: 			kADSPEndpoint, 			// "TADSPEndpoint"kMNPDoAllocate: 		kMNPDoAllocate, 		// [1, 0, 0, 0]kMNPDontAllocate: 		kMNPDontAllocate, 		// [0, 0, 0, 0]k1KOutputBuffer: 		k1KOutputBuffer, 		// [ 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 8 ]k2KOutputbuffer: 		k2KOutputbuffer, 		// [ 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 8 ]T_NOFLAG: 				T_NOFLAG, 				// 0x00000000T_CANSENDZERO: 			T_CANSENDZERO, 			// 0x00000001T_CANEOM: 				T_CANEOM, 				// 0x00000002T_EXPCHANNEL: 			T_EXPCHANNEL, 			// 0x00000004T_RELIABLE: 			T_RELIABLE, 			// 0x00000008T_CANBIND: 				T_CANBIND, 				// 0x00000010T_CANLISTEN: 			T_CANLISTEN, 			// 0x00000011T_CANCONNECT: 			T_CANCONNECT, 			// 0x00000012T_CANRELEASE: 			T_CANRELEASE, 			// 0x00000014T_FRAMING: 				T_FRAMING, 				// 0x00000018T_FLOWCONTROL: 			T_FLOWCONTROL, 			// 0x00000020T_MORE: 				T_MORE, 				// 0x00000001T_FRAME: 				T_FRAME, 				// 0x00000002T_EXP: 					T_EXP, 					// 0x00000004T_COTS: 				T_COTS, 				// 1T_COTS_ORD: 			T_COTS_ORD, 			// 2T_CLTS: 				T_CLTS, 				// 3T_TRANS: 				T_TRANS, 				// 5T_TRANS_ORD: 			T_TRANS_ORD, 			// 6T_UNINIT: 				T_UNINIT, 				// 0T_UNBND: 				T_UNBND, 				// 1T_IDLE: 				T_IDLE, 				// 2T_OUTCON: 				T_OUTCON, 				// 3T_INCON: 				T_INCON, 				// 4T_DATAXFER: 			T_DATAXFER, 			// 5T_OUTREL: 				T_OUTREL, 				// 6T_INREL: 				T_INREL, 				// 7T_INFLUX: 				T_INFLUX, 				// 8T_YES: 					T_YES, 					// 1T_NO: 					T_NO, 					// 0T_UNUSED: 				T_UNUSED, 				// -1T_NULL: 				T_NULL, 				// 0T_ABSREQ: 				T_ABSREQ, 				// 0x00008000T_INFINITE: 			T_INFINITE, 			// -1T_INVALID: 				T_INVALID, 				// -2kCMOModemECType: 		kCMOModemECType, 		// "mecp"kCMOModemDialing: 		kCMOModemDialing, 		// "mdo "kCMOModemConnectType: 	kCMOModemConnectType, 	// "mcto"kCMOModemPrefs: 		kCMOModemPrefs, 		// "mpre"kCMOModemProfile: 		kCMOModemProfile, 		// "mpro"kCMOModemVoiceSupport: 	kCMOModemVoiceSupport, 	// "mvso"kCMATitleLabel: 		kCMATitleLabel, 		// "titl"kCMATypeLabel: 			kCMATypeLabel, 			// "typa"kCMADiscLabel: 			kCMADiscLabel, 			// "disc"kCMAKindLabel: 			kCMAKindLabel, 			// "kind"kCMARouteLabel: 		kCMARouteLabel, 		// "rout"kCMAltLabel: 			kCMAltLabel, 			// "alt "kCMABBServiceName: 		kCMABBServiceName, 		// "BBSV"kNamedAppleTalkAddress: kNamedAppleTalkAddress, // 1kRawAppleTalkAddress: 	kRawAppleTalkAddress, 	// 2kPhoneNumber: 			kPhoneNumber, 			// 3kNBPEntityName: 		kNBPEntityName, 		// 1kNameTypeZone: 			kNameTypeZone, 			// 2kNoflag: 				kNoflag, 				// 0x00000000kCanSendZero:			kCanSendZero, 			// 0x00000001kCanEOM: 				kCanEOM, 				// 0x00000002kExpChannel: 			kExpChannel, 			// 0x00000004kReliable: 				kReliable, 				// 0x00000008kCanBind: 				kCanBind, 				// 0x00000010kCanListen: 			kCanListen, 			// 0x00000011kCanConnect: 			kCanConnect, 			// 0x00000012kCanRelease: 			kCanRelease, 			// 0x00000014kFraming: 				kFraming, 				// 0x00000018kFlowControl: 			kFlowControl, 			// 0x00000020kMore: 					kMore, 					// 0x00000001kFrame: 				kFrame, 				// 0x00000002kExp: 					kExp, 					// 0x00000004kCots: 					kCots, 					// 1kCotsOrd: 				kCotsOrd, 				// 2kClts: 					kClts, 					// 3kTrans: 				kTrans, 				// 5kTransOrd: 				kTransOrd, 				// 6kUninit: 				kUninit, 				// 0kUnbnd: 				kUnbnd, 				// 1kIdle: 					kIdle, 					// 2kOutCon: 				kOutCon, 				// 3kInCon: 				kInCon, 				// 4kDataXfer: 				kDataXfer, 				// 5kOutRel: 				kOutRel, 				// 6kInRel: 				kInRel, 				// 7kInFlux: 				kInFlux, 				// 8kYes: 					kYes, 					// 1kNo: 					kNo, 					// 0kUnused: 				kUnused, 				// -1kNull: 					kNull, 					// 0kAbsReq: 				kAbsReq, 				// 0x00008000kInfinite: 				kInfinite, 				// -1kInvalid: 				kInvalid, 				// -2};// ===== 2.0 ONLY =====if kBuild20 and not kEndPointOnlythen call kAppendFrame with (partData,{ // 2.0kTextCompander:			kTextCompander,			// "TLZStoreCompander";kBitmapCompander:		kBitmapCompander,		// "TPixelMapCompander";kNoTimeout:				kNoTimeout,				// 0;kTimeOutImmediate:		kTimeOutImmediate,		// -1;kBarberIdle:			kBarberIdle,			// 300;kCMOAppletalkBuffer:	kCMOAppletalkBuffer,	// "bsiz";kEOP:					kEOP,					//0x00000000;kPacket:				kPacket,				//0x00000002;kForever:				kForever,				//0x1fffffff;chNUL:					chNUL,					//0;chSOH:					chSOH,					//1;chSTX:					chSTX,					//2;chETX:					chETX,					//3;chEOT:					chEOT,					//4;chENQ:					chENQ,					//5;chACK:					chACK,					//6;chBEL:					chBEL,					//7;chBS:					chBS,					//8;chHT:					chHT,					//9;chLF:					chLF,					//10;chVT:					chVT,					//11;chFF:					chFF,					//12;chCR:					chCR,					//13;chSO:					chSO,					//14;chSI:					chSI,					//15;chDLE:					chDLE,					//16;chDC1:					chDC1,					//17;chDC2:					chDC2,					//18;chDC3:					chDC3,					//19;chDC4:					chDC4,					//20;chNAK:					chNAK,					//21;chSYN:					chSYN,					//22;chETB:					chETB,					//23;chCAN:					chCAN,					//24;chEM:					chEM,					//25;chSUB:					chSUB,					//26;chESC:					chESC,					//27;chFS:					chFS,					//28;chGS:					chGS,					//29;chRS:					chRS,					//30;chUS:					chUS,					//31;kStandardCharSetInfo:	kStandardCharSetInfo,	//0;kPalmerCharSetInfo:		kPalmerCharSetInfo,		//1;kUCBlockCharSetInfo:	kUCBlockCharSetInfo,	//2;kUpperCaseCharSetInfo:	kUpperCaseCharSetInfo,	//3;kLetterSpaceCursiveOptionDefault:				//4;						kLetterSpaceCursiveOptionDefault,kLetterSetSelectionDefault:						//0;						kLetterSetSelectionDefault,kLong:					kLong,					//1;kULong:					kULong,					//2;kShort:					kShort,					//3;kByte:					kByte,					//4;kBoolean:				kBoolean,				//5;kHighInt:				kHighInt,				//6;kHexLong:				kHexLong,				//7;kSplitLong:				kSplitLong,				//8;kSplitByteLong:			kSplitByteLong,			//9;kStruct:				kStruct,				//10;kArray:					kArray,					//11;kRef:					kRef,					//12;kChar:					kChar,					//13;kCString:				kCString,				//14;kUnicodeChar:			kUnicodeChar,			//15;kUnicodeString:			kUnicodeString,			//16;kCommScriptNoActiveInputSpec:					//-54000;						kCommScriptNoActiveInputSpec,kCommScriptBadForm:		kCommScriptBadForm,		//-54001;kCommScriptZeroLengthData:						//-54002;						kCommScriptZeroLengthData,kCommScriptExpectedSpec:kCommScriptExpectedSpec,//-54003;kCommScriptInvalidOption:						//-54004;						kCommScriptInvalidOption,kCommScriptInvalidEndSequence:					//-54005;						kCommScriptInvalidEndSequence,kCommScriptInappropriatePartial:				//-54006;						kCommScriptInappropriatePartial,kCommScriptInappropriateTermination:			//-54007;						kCommScriptInappropriateTermination,kCommScriptInappropriateTarget:					//-54008;						kCommScriptInappropriateTarget,kCommScriptInappropriateFilter:					//-54009;						kCommScriptInappropriateFilter,kCommScriptExpectedTarget:						//-54010;						kCommScriptExpectedTarget,kCommScriptExpectedTemplate:					//-54011;						kCommScriptExpectedTemplate,kCommScriptInputSpecAlreadyActive:				//-54012;						kCommScriptInputSpecAlreadyActive,kCommScriptInvalidProxy:kCommScriptInvalidProxy,//-54013;kCommScriptNoEndpointAvailable:					//-54014;						kCommScriptNoEndpointAvailable,kCommScriptInappropriateCall:					//-54015;						kCommScriptInappropriateCall,						kOutLstn:				kOutLstn,				//9;kFrameExchange:			kFrameExchange,			//'autoInAndOut;kDataExchange:			kDataExchange,			//'InAndOut;kCanadaCountryId:		kCanadaCountryId,		//10;kJapanCountryId:		kJapanCountryId,		//81;kUSACountryId:			kUSACountryId,			//1;kModemFaxClass0:		kModemFaxClass0,		//0x00000001;kModemFaxClass1:		kModemFaxClass1,		//0x00000002;kModemFaxClass2:		kModemFaxClass2,		//0x00000004;kModemECInternalOnly:	kModemECInternalOnly,	//0x00000010;kV21Ch2Mod:				kV21Ch2Mod,				//0x00000001;kV27Ter24Mod:			kV27Ter24Mod,			//0x00000002;kV27Ter48Mod:			kV27Ter48Mod,			//0x00000004;kV29_72Mod:				kV29_72Mod,				//0x00000008;kV17_72Mod:				kV17_72Mod,				//0x00000010;kV17st_72Mod:			kV17st_72Mod,			//0x00000020;kV29_96Mod:				kV29_96Mod,				//0x00000040;kV17_96Mod:				kV17_96Mod,				//0x00000080;kV17st_96Mod:			kV17st_96Mod,			//0x00000100;kV17_12Mod:				kV17_12Mod,				//0x00000200;kV17st_12Mod:			kV17st_12Mod,			//0x00000400;kV17_14Mod:				kV17_14Mod,				//0x00000800;kV17st_14Mod:			kV17st_14Mod,			//0x00001000;kCMOModemConnectSpeed:	kCMOModemConnectSpeed,	//"mspd";kCMOModemFaxCapabilities:						//"mfax";						kCMOModemFaxCapabilities,kCMOSerialHWChipLoc:	kCMOSerialHWChipLoc,	//"schp";kHWLocExternalSerial:	kHWLocExternalSerial,	//"extr";kHWLocBuiltInIR:		kHWLocBuiltInIR,		//"infr";kHWLocBuiltInModem:		kHWLocBuiltInModem,		//"mdem";kHWLocPCMCIASlot1:		kHWLocPCMCIASlot1,		//"slt1";kHWLocPCMCIASlot2:		kHWLocPCMCIASlot2,		//"slt2";kHWLocPCMCIAAnySlot:	kHWLocPCMCIAAnySlot,	//"slot";kCMOSlowIRConnect:		kCMOSlowIRConnect,		//"irco";kCMOSerialCircuitControl:						//"sctl";						kCMOSerialCircuitControl,kCMOSerialChipSpec:		kCMOSerialChipSpec,		//"sers";kHMOSerExtClockDivide:	kHMOSerExtClockDivide,	//"cdiv";kSerCap_Parity_Space:	kSerCap_Parity_Space,	//0x00000001;kSerCap_Parity_Mark:	kSerCap_Parity_Mark,	//0x00000002;kSerCap_Parity_Odd:		kSerCap_Parity_Odd,		//0x00000004;kSerCap_Parity_Even:	kSerCap_Parity_Even,	//0x00000008;kSerCap_DataBits_5:		kSerCap_DataBits_5,		//0x00000001;kSerCap_DataBits_6:		kSerCap_DataBits_6,		//0x00000002;kSerCap_DataBits_7:		kSerCap_DataBits_7,		//0x00000004;kSerCap_DataBits_8:		kSerCap_DataBits_8,		//0x00000008;kSerCap_StopBits_1:		kSerCap_StopBits_1,		//0x00000010;kSerCap_StopBits_1_5:	kSerCap_StopBits_1_5,	//0x00000020;kSerCap_StopBits_2:		kSerCap_StopBits_2,		//0x00000040;kSerCap_StopBits_All:	kSerCap_StopBits_All,	//0x00000070;kSerCap_DataBits_All:	kSerCap_DataBits_All,	//0x0000000f;kSerialChipUnknown:		kSerialChipUnknown,		//0xff;kSerialChip8250:		kSerialChip8250,		//0x00;kSerialChip16450:		kSerialChip16450,		//0x01;kSerialChip16550:		kSerialChip16550,		//0x02;kSerialChip8530:		kSerialChip8530,		//0x20;kSerialChip6850:		kSerialChip6850,		//0x21;kSerialChip6402:		kSerialChip6402,		//0x22;kSerialChipVoyager:		kSerialChipVoyager,		//0x23;kSerOutDTR:				kSerOutDTR,				//0x01;kSerOutRTS:				kSerOutRTS,				//0x02;kSerInDSR:				kSerInDSR,				//0x02;kSerInDCD:				kSerInDCD,				//0x08;kSerInRI:				kSerInRI,				//0x10;kSerInCTS:				kSerInCTS,				//0x20;kSerInBreak:			kSerInBreak,			//0x80;kSerClk_Default:		kSerClk_Default,		//0x00;kSerClk_DivideBy_1:		kSerClk_DivideBy_1,		//0x80;kSerClk_DivideBy_16:	kSerClk_DivideBy_16,	//0x81;kSerClk_DivideBy_32:	kSerClk_DivideBy_32,	//0x82;kSerClk_DivideBy_64:	kSerClk_DivideBy_64,	//0x83;kSerClk_DivideBy_Mask:	kSerClk_DivideBy_Mask,	//0x03;kUsingNegotiateIR:		kUsingNegotiateIR,		//0;kUsingSharpIR:			kUsingSharpIR,			//1;kUsingNewton1:			kUsingNewton1,			//2;kUsingNewton2:			kUsingNewton2,			//4;kUsing9600:				kUsing9600,				//1;kUsing19200:			kUsing19200,			//2;kUsing38400:			kUsing38400,			//4;kNormalConnect:			kNormalConnect,			//0;irSymmetricConnect:		irSymmetricConnect,		//1;irAcitveConnect:		irAcitveConnect,		//2; ???  irActiveConnect ???kSnoozeAlert:			kSnoozeAlert,			//9;kSndBuffer:				kSndBuffer,				//1;kRcvBuffer:				kRcvBuffer,				//2;kAtnBuffer:				kAtnBuffer,				//3;kInputFrame:			kInputFrame,			//'InputFrame;kOutputFrame:			kOutputFrame,			//'OutputFrame;kFrameExchange_Initiate:kFrameExchange_Initiate,//'InAndOut_MeFirst;kFrameExchange_Confirm:	kFrameExchange_Confirm,	//'InAndOut_MeSecond;kPropagateUp:			kPropagateUp,			//true;kNoPropagateUp:			kNoPropagateUp,			//nil;kPropagateDown:			kPropagateDown,			//true;kNoPropagateDown:		kNoPropagateDown,		//nil;lvNoMarkers:			lvNoMarkers,			//1;lvShowChecks:			lvShowChecks,			//2;lvShowTopPriority:		lvShowTopPriority,		//4;lvShowSubPriority:		lvShowSubPriority,		//8;lvShowPriority:			lvShowPriority,			//12;lvAdjustTopicBounds:	lvAdjustTopicBounds,	//16;kUseLocalTalk:			kUseLocalTalk,			//1;kUseMNPSerial:			kUseMNPSerial,			//3;kUseIR:					kUseIR,					//4;kUseModem:				kUseModem,				//5;kNoConnection:			kNoConnection,			//0;kSettingUp:				kSettingUp,				//1;kSyncing:				kSyncing,				//2;kRestoring:				kRestoring,				//3;kLoadingPackage:		kLoadingPackage,		//4;kLoadingPatch:			kLoadingPatch,			//6;kFileBrowsing:			kFileBrowsing,			//8;kOKForDevelopers:		kOKForDevelopers,		//20;kMacPlatform:			kMacPlatform,			//0;kWindowsPlatform:		kWindowsPlatform,		//1;kPackageFiles:			kPackageFiles,			//0;kImportFiles:			kImportFiles,			//1;kRestoreFiles:			kRestoreFiles,			//2;kOther:					kOther,					//3;kDesktop:				kDesktop,				//0;kFile:					kFile,					//1;kFolder:				kFolder,				//2;kDisk:					kDisk,					//3;// Event codes used by systemkEventToolSpecific:	1,kEventDisconnect: 	2,kEventRelease:		3,});DefineGlobalConstant('kPortAddrStruct, [		'struct,		['array,'byte,4],		'short	]);	DefineGlobalConstant('kPortAddrData,{	arglist:		[		[0,0,0,0],		0,	// destination port number						],	typelist: kPortAddrStruct,});if kBuild20 and not kEndPointOnlythen call kAppendFrame with (partData,{ // 2.0// Newton Internet Enabler (from Inet Constants)// Transport service type constantskTCP:	1,kUDP:	2,// Utility functions for Internet applicationskNumtoHostAddr: func(addr)begin	// This is the inverse of HostAddrToNum	// It converts a 4 byte array to a "w.x.y.z" string.	local index, str := "";	// A sanity check	if Length(addr) <> 4 then begin		return nil;	end;	for index := 0 to Length(addr) - 1 do begin		str := str & NumberStr(addr[index]);		if index < Length(addr) - 1 then			str := str & ".";	end;	return str;end,kHostAddrToNum: func(str)begin	// This is the inverse of NumToHostAddr	// It converts a "w.x.y.z" string to a 4 byte array.	// Actually the separators between the numbers can be any non-digits, except space	local index := 0, partCnt := 0;	local subNum := 0, digits := "0123456789 ";	local num := [0,0,0,0], processNum;	for index := 0 to StrLen(str) - 1 do begin		ch := StrPos(digits, SubStr(str, index, 1), 0);		if not ch then begin			// If first character is not a digit then skip junk at beginning			if index = 0 then processNum := nil;			// Not a digit.  Process number, unless skipping junk			if processNum then begin				// Truncate numbers greater than 255				if subNum > 255 then subNum := 255;				if partCnt < 4 then					num[partCnt] := subNum;				partCnt := partCnt + 1;				subNum := 0;				processNum := nil;			end;		end else begin			// Add the next digit to subNum (unless it was a space)			if ch < 10 then				subNum := subNum * 10 + ch;			processNum := true;		end;	end;	// Truncate numbers greater than 255	if subNum > 255 then subNum := 255;	// Do the last part (which usually won't have a trailing .)	if subNum <> 0 and partCnt < 4 then		num[partCnt] := subNum;	return num;end,kIsIPAddr: func(str)begin	// This returns true if the string is an IP address (as opposed to a domain name)	// cheap test now just tests if the string ends with a numeric character	local digits := "0123456789";	local len := strLen(str);	if len > 0 and  StrPos(digits, SubStr(str, len - 1, 1), 0) then		true	else 		nil;end,kPortAddrStruct: kPortAddrStruct, // defined earlierkPortAddrData: kPortAddrData, 	// defined earlier// Use this to get Instantiate options// protocol must be kSLIP or kPPPkGetEndpointConfigOptions: func(linkID,protocol) 	return [		{label:	"inet",		type:	'service,		opCode:	opSetRequired,		result:	nil,			},		{label:	"ilid",			// set the link id		type:	'option,		opCode:	opSetRequired,		result:	nil,		form:	'template,		data:	{			arglist: [linkID],			typelist:				['struct,				'ulong				],				},		},		{label:	"itsv",			// set the transport protocol (TCP or UCP)		type:	'option,		opCode:	opSetRequired,		result:	nil,		form:	'template,		data:	{			arglist: [protocol],			typelist:				['struct,				'ulong				],				},		},	],kUDPReceiveOptions:	[			{label:	"iuds",			// get the UDP destination socket	type:	'option,	opCode:	opGetCurrent,	result:	nil,	form:	'template,	data: 	kPortAddrData,	},	{label:	"iuss",			// get the UDP source socket	type:	'option,	opCode:	opGetCurrent,	result:	nil,	form:	'template,	data:	kPortAddrData,	},	],kINetBindOptions: func(localPort,useDefaultPort)	return [		{label: "ilpt",			// set the local port		type: 	'option,		opCode: opSetRequired,		result: nil,		form: 	'template,		data:	{			arglist:					[localPort,		// local port number				useDefaultPort	// use default port					],			typelist:				['struct,				'short,				'boolean				],				},		},		],kTCPConnectOptions: func(remoteAddr,remotePort)	return [		{label:	"itrs",			// set the TCP remote socket		type:	'option,		opCode:	opSetRequired,		result:	nil,		form:	'template,		data:	{			arglist:					[remoteAddr,				remotePort,		// remote port number					],			typelist: kPortAddrStruct,			},		},		],			kTCPListenOptions: [	{label:	"itrs",			// get the TCP remote socket	type:	'option,	opCode:	opGetCurrent,	result:	nil,	form:	'template,	data:	kPortAddrData,	},	],		kGetIPAddressesOptions: [	{label:	"iprf",	type:	'option,	opCode: opGetCurrent,	data: 	{		arglist: [			[0,0,0,0],			[0,0,0,0],			],		typelist: [			'struct,			['array,'byte,4],			['array,'byte,4],			]		}	},	],		kUDPPutBytesOptions: func(addr,port)	return [		{label:	"iuds",		// set the UDP destination socket		type:	'option,		opCode:	opSetRequired,		result:	nil,		form:	'template,		data:	{			arglist:					[addr,				port,		// remote port number					],			typelist: kPortAddrStruct,			},		},		],		});if kBuild20 and not kEndPointOnlythen call kAppendFrame with (partData,{ // 2.0// Newton Internet Enabler (from Inet Errors)// note: number of string mappings are in errcnst.txtkInetToolErrBindFailed:				-60001,kInetToolErrIPBindFailed:			-60002,kInetToolErrPushModule:				-60004,kInetToolErrIlink:					-60005,kInetToolErrNetActivateReq:			-60006,kInetToolErrTCPBind:				-60007,kInetToolErrGetRequest:				-60008,kInetToolErrPutRequest:				-60009,kInetToolErrConnect:				-60010,kInetToolErrDlAttach:				-60011,kInetToolErrBind:					-60012,kInetToolErrOpenLink:				-60013,kInetToolErrUnlink:					-60014,kInetToolErrOutOfPhase:				-60015,kInetToolErrAddRoute:				-60016,kInetToolErrListen:					-60017,kInetToolErrLinkNotOpened:			-60018,kInetToolErrDriverNotOpened:		-60019,kInetToolErrStreamNotOpened:		-60020,kInetToolErrBindReqFailed:			-60021,kInetToolErrConnResReqFailed:		-60022,kInetToolErrUnexpectedMgmntEvent:	-60058,// Following errors are mapped to the errors reported from the top of the// stack and are reported to the glue code and in some cases to the clientkInetToolErrMemAlloc:				-60023,kInetToolErrMsgType:				-60024,kInetToolErrNoDevice:				-60025,kInetToolErrllegalOpenOnStream:		-60026,kInetToolErrReqInInvalidState:		-60027,kInetToolErrPrimitiveTooSmall:		-60028,kInetToolErrPrimitiveOutOfRange:	-60029,kInetToolErrPrimitiveOnInvalidStr:	-60030,kInetToolErrMessageTooLong:			-60031,kInetToolErrNetworkAlreadyActive:	-60032,kInetToolErrNetworkNumberInvalid:	-60033,kInetToolErrUnsupportedIoctl:		-60034,kInetToolErrStreamAlreadyAttached:	-60035,kInetToolErrUnknownMuxIndex:		-60036,kInetToolErrNetworkIsInactive:		-60037,kInetToolErrBogusConnection:		-60038,kInetToolErrInvalidBillingMode:		-60039,kInetToolErrNoTrigSelectedInAlarm:	-60040,kInetToolErrInvalidTrigSize:		-60041,kInetToolErrInvalidConnectionRef:	-60042,kInetToolErrIlegalMdataInPrim:		-60043,kInetToolErrMissingMdataInPrim:		-60044,kInetToolErrInvalidSegmentedPrim:	-60045,kInetToolErrInvalidNPIVersion:		-60046,kInetToolErrInvalidAddress:			-60047,kInetToolErrOutOfTCPPortNumbers:	-60048,kInetToolErrSocketInUse:			-60049,kInetToolErrReservedPortNumber:		-60050,kInetToolErrExpDataNotSupported:	-60051,// TPI errors related to UDPkInetToolErrRedundentRequest:		-60052,kInetToolErrUnexpectedDLPrim:		-60053,kInetToolErrUnexpectedTPIPrim:		-60054,kInetToolErrUnexpectedNPIPrim:		-60055,kInetToolErrUnknownTPIErrorCode:	-60056,// Events to the clientkInetErrStreamInoperative:			-60057,// Errors related to network status events on PPP's management streamkInetErrLinkActivationNotCofirmed:		-60059,kInetErrLinkDeactivationNotCofirmed:	-60060,kInetErrLinkTerminateAckNotReceived:	-60061,kInetErrNetworkDifferentFromTheReq:		-60062,kInetErrConnLossFromTerminateRequest:	-60063,kInetErrConnLossFromTerminateAck:		-60063,kInetErrConnLossFromConfigureRequest:	-60064,kInetErrConnLossFromConfigureReject:	-60065,kInetErrConnLossFromConfigureAck:		-60066,kInetErrConnLossFromConfigureNack:		-60067,kInetErrConnLossFromCodeReject:			-60068,kInetErrConnLossFromMaxSetUpAttempts:	-60069,kInetErrConnLossFromMandatoryFrameSize:	-60070,kInetErrConnLossFromMandatoryAuthRej:	-60071,kInetErrConnLossFromRemoteInitAuthFail:	-60072,kInetErrConnLossFromLocalInitAuthFail:	-60073,kInetErrConnLossFromLowerLinkFailure:	-60074,kInetErrConnLossUnspecifiedReason:		-60075,kInetErrConnLossFromMaxRemoteInitAuthFail:-60076,kInetErrConnLossFromMaxLocalInitAuthFail:-60077,kInetErrConnLossFromMngmntDeactivation:	-60078,kInetErrConnLossFromNoIpAddr:			-60079,kInetToolErrDataLinkLevel:		-60080,kInetToolErrSubsBind:			-60081,kInetToolErrNetDeActivateReq:	-60082,kInetToolErrNetworkLevel:		-60083,//Link Controller err range: -60500 to -60999kInetErrNoSuchLinkID:			-60501,//kInetErrBadTargetServiceOpt:	-60502,//kInetErrNoUnderlyingTool:		-60503,kInetErrLinkDisconnected:		-60504,kInetErrConnectLinkFailed:		-60505,//DNSTool err base is -60750 (to 60999)kDNSErrNoAnswerFoundYet:		-60751, //no answer to a given question has yet been foundkDNSErrInternalErr:				-60752, //some kind of internal DNS tool failurekDNSErrNameSyntaxErr:			-60791, //bad name in DNS request...kDNSErrNoNameServer:			-60794, //no name server defined with an optKDNSErrAuthNameErr:				-60795, //authoritative nonexistent domain errorkDNSErrNoAnswerErr:				-60796, //no answers available for request..could be nonexistent domainkDNSErrNonexistentDomain:		-60797, //the domain name give in the request does not existkDNSErrOutOfMemory:				-60798, //DNS tool ran out of memorykDNSErrCouldNotContactServer:	-60800, //couldn't connect to the current DNS serverkDNSErrNoServersAvailable:		-60801, //couldn't connect to any of the DNS servers in our listkDNSErrNoResponseFromServer:	-60814, //no response from the current serverkDNSErrNoResponseFromAnyServer:	-68015, //no response from any of the DNS servers we can query});DefineGlobalConstant('kInetErrorTable, [ // also used in kGetInetErrorStr	-60501,	"No link setup is defined", 		// kInetErrNoSuchLinkID	-60504,	"Internet Link disconnected",		// kInetErrLinkDisconnected	-60505,	"Internet connection failed",		// kInetErrConnectLinkFailed	-60057,	"Remote host disconnected the link",// kInetErrStreamInoperative	-60015,	"PPP Negotiation failed",			// kInetToolErrOutOfPhase	-60797,	"The domain name does not exist",	// kDNSErrNonexistentDomain	-60814,"No response from the name server",	// kDNSErrNoResponseFromServer	0,nil,	// must leave this at the end !!	]);if kBuild20 and not kEndPointOnlythen call kAppendFrame with (partData,{ // 2.0//kInetErrorTableEnglish: kInetErrorTable,kInetErrorTable: kInetErrorTable,// not sure about how this works -- maybe defined at run-time?// To localize the error table, you can locObj the whole array and// not bother to define all those symbols....//DefineGlobalConstant('kInetErrorTable,Locobj(kInetErrorTableEnglish,'errorstrings));// This requires a localization frame be defined like this: SetLocalizationFrame({english: '{}});// returns a string for a given error kGetInetErrorStr: func(error)	begin		local errStr := TableLookup(kInetErrorTable, error);		if not errStr then			errStr := TableLookup(ROM_errortable, error);		if not errStr then			errStr := "Internet Error " & NumberStr(errorNum);		errStr;	end,// extracts the error number from an exceptionkGetExceptionError: func(exception) 	if HasSlot(exception, 'error) then			exception.error	else if classof(exception.data) = 'int then			exception.data	else if IsFrame(exception.data) and HasSlot(exception.data, 'errorCode) then			exception.data.errorCode;	else -1, // unknown exception});if kBuild20 and not kEndPointOnlythen call kAppendFrame with (partData,{ // 2.1//IRDAkCMSIrDA:						kCMSIrDA,						//"irda";kCMOIrDADiscoveryInformation:	kCMOIrDADiscoveryInformation,	//"irdi";kCMOIrDAConnectInformation:		kCMOIrDAConnectInformation,		//"irci";kCMOIrDAReceiveBuffers:			kCMOIrDAReceiveBuffers,			//"irrb";kCMOIrDALinkDisconnectTimeout:	kCMOIrDALinkDisconnectTimeout,	//"irld";kCMOIrDAConnectUserData:		kCMOIrDAConnectUserData,		//"ircd";kIrDA1ProbeSlot:				kIrDA1ProbeSlot,				//1;kIrDA6ProbeSlot:				kIrDA6ProbeSlot,				//6;kIrDA8ProbeSlot:				kIrDA8ProbeSlot,				//8;kIrDA12ProbeSlot:				kIrDA12ProbeSlot,				//12;kIrDASvcHintPnPCompatible:		kIrDASvcHintPnPCompatible,		//1;kIrDASvcHintPDAPalmtop:			kIrDASvcHintPDAPalmtop,			//2;kIrDASvcHintComputer:			kIrDASvcHintComputer,			//4;kIrDASvcHintPrinter:			kIrDASvcHintPrinter,			//8;kIrDASvcHintModem:				kIrDASvcHintModem,				//16;kIrDASvcHintFAX:				kIrDASvcHintFAX,				//32;kIrDASvcHintLanAccess:			kIrDASvcHintLanAccess,			//64;kIrDASvcHintTelephony:			kIrDASvcHintTelephony,			//256;kIrDASvcHintFileServer:			kIrDASvcHintFileServer,			//512;});