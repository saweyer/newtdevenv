constant kFakeStr := "\u00A0";popupEdit :=func(para, INT x1, INT y1) // !!!mbegin	// assumes caret already set	local text := para.text;	local INT slen := StrLen(text), first := 0, last := 0;	// find "word" clicked on	if kBuild20	then begin		local se := para:PointToWord(x1, y1);		if se		then begin			first := se.startChar;			last := se.endChar;			end;		end	else begin		local edited := para.edited;		para.edited := true;	// prevent update initially		PostKeyString(para,kFakeStr);		first := last := StrPos(text,kFakeStr,0);//Print([first,last]);		PostKeyString(para,"\u0008");	//backspace		para.edited := edited;		ClearUndoStacks();		if not first		then return;		text := para.text;	// just in case?		//SetValue(self, 'text, StrMunger(text,first,1, nil,0,nil));		//SetKeyView(self, first);		//first := last := GetCaretBox().offset; // 1.x doesn't work...		while (first > 0) and isAlphaNumeric(text[first-1])		do first := first-1;		while (last < slen) and isAlphaNumeric(text[last])		do last := last+1;//Print([first,last]);		end;//Print(se);	if first < last and last < slen	then begin		local str := SubStr(text, first, last - first), ch := text[last], pos, lineEnd;		local sym := Intern(str), replaceOptions, replaceStuff;		local lineEnd := if kBuild20 then CharPos(text, unicodeCR, last) else StrPos(text, cr, last);//Print(str);		if ch = $:		then begin // slot?			if replaceOptions := HelpStr.slotHelp.(sym)			then begin				pos := if kBuild20 then CharPos(text, $,, last) else StrPos(text, ",", last); 				pos :=	// end of val/line					if pos					then if lineEnd						then min(pos,lineEnd)						else pos					else lineEnd;				replaceStuff := [str, last+1, lineEnd, $ , ",\n"];				end;			end		else if ch = $(		then begin	// method or function			replaceOptions :=				if first > 0 and text[first-1] = $:				then HelpStr.methHelp.(sym)				else HelpStr.funcHelp.(sym);			if replaceOptions			then begin				pos := if kBuild20 then CharPos(text, $), last) else StrPos(text, ")", last);					pos :=	// end of expr/line					if pos					then if lineEnd						then min(pos,lineEnd)						else pos					else lineEnd;				replaceStuff := [str, last+1, pos, nil, if pos=lineEnd then ");\n" else $)];				end;			end		else if ch = $,		then begin	// arg (like protoApp?)			if replaceOptions := HelpStr.protHelp.(sym)			then begin				replaceOptions := ArrayMunger(Clone(replaceOptions), Length(replaceOptions), 0, HelpStr.viewHelp, 0, nil);				replaceStuff := [str, last+1, lineEnd, unicodeCR, ": ,\n"];				end			end;		if replaceOptions		then begin//Print(info); Print(replaceStuff);			para.replaceStuff := replaceStuff;			if not isArray(replaceOptions)			then replaceOptions := [replaceOptions];			para.replaceOptions := replaceOptions;			local gb := para:GlobalBox();			x1 := x1 - gb.left;			y1 := y1 - gb.top;			if HasVariable(para, 'newtPopup)			then para:newtPopup(replaceOptions, x1, y1)			else if kBuild20			then begin				local pp := para:PopupMenu(replaceOptions, {left: x1, top: y1});				pp.pickMaxWidth := GetAppParams().appAreaWidth-10;				pp:?SyncView();				//SetKeyView(self, :PointToCharOffset(x1,y1));				end			else DoPopup(replaceOptions, x1, y1, para);			end;		end;end